<body style="background: black; color: gray; font-size: 8pt">
<div id="box" style="margin:10px; float: left;" >
  <canvas width="128" height="128" style="background-color: #ccc"></canvas>
  <div style=" height: 20px; overflow: hidden;">caption</div>
</div>

<script>
  SIZE = 128;

  box.style.width = SIZE + "px";
  box.style.height = SIZE + "px";
  box.children[1].style.width = SIZE + "px";

  // Returns false if drawn fully filled field
  function draw(element, comparator) {
    const context = element.getContext('2d');
    //context.fillStyle = '#ccc';
    let filled = 0;

    for (let x = 0; x < SIZE; x++) {
      for (let y = 0; y < SIZE; y++) {
        if (comparator(x, y)) {
          context.fillRect(x, y, 1, 1);
          filled++;
        }
      }
    }

    // false if drawn fully filled field
    return  (!(filled == 0 || filled == 128 * 128));

  }

  /**
   * https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array
   * Shuffles array in place. ES6 version
   * @param {Array} a items An array containing the items.
   */
  function shuffle(a) {
      for (let i = a.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [a[i], a[j]] = [a[j], a[i]];
      }
      return a;
  }


  const allComparators = [
    (x, y) => (x & y) % 6 == (x ^ y) % 9,
    (x, y) => (x & y) % 2 == (x ^ y) % 6,
    (x, y) => 100 % (x&y) == 100 % (-x&y),
    (x, y) => 100 % (x&y) == 100 % (x&-y),
    (x, y) => 100 % (-x&-y) == 100 % (-x&y),
    (x, y) => 100 % (-x&-y) == 100 % (x&-y),
    (x, y) => 100 % (-x&y) == 100 % (x&-y),

    (x, y) => 100 % (x&y) + 100 % (-x&y),
    (x, y) => (y % x) % 20,
    (x, y) => 40 % (x % y),
    (x, y) => ((x ^ y) & 32) * (x ^ y) % 9,
    (x, y) => (x / y) % 1,
    (x, y) => x & y,
    (x, y) => x % y,
    (x, y) => x & 9,
    (x, y) => (x^y) % 5,
    (x, y) => ((x * y) ** 4) % 7,
    (x, y) => ((x * y) ** 5) % 99,
    (x, y) => ((x * y) ** 9) % 3,
    (x, y) => (x ^ y) & 32,
    (x, y) => (x ^ y) & 72,
    (x, y) => (x ^ y) & 23,
    (x, y) => (x & y) & (x ^ y) % 19,
    (x, y) => (x * 64) % y * ((x ^ y) < 77),
    (x, y) => (x % y) % 4,
    (x, y) => (x ^ y) % 9,
    (x, y) => (x | y) < 200,

    // изучить:
    (x, y) => ((x*y)-(x&y))&65,
    (x, y) => y&x&4,
    (x, y) => 1&9/3+11-4-5/16*x*14+13,
    (x, y) => 8&3%6^y+0&x&11-4,
    (x, y) => y**4&x,
    (x, y) => 8&0==2-7==5|x&11-y%14,
    (x, y) => y&4*1**3&x,
    (x, y) => y&x&5^3%2,
    (x, y) => 3**5/y&x,
    (x, y) => 3+1+y**6&x,
    (x, y) => 8&9-2|1==x*y%10,
    (x, y) => y/x*2**6&3,
    (x, y) => x**6&y/3+4,
    (x, y) => 7+3/4&x+6*y**8,
    (x, y) => 1^y**2&x, // (x, y) => 5&1^y**2&x+9*3
    (x, y) => 10**x/11%12&7**6+3*13*5,
    (x, y) => x&10^2*4+1/8&y,
    (x, y) => y/3+x%5&6^11%2-18-17&1%10,
    (x, y) => y/7&6%3+x&5,
    (x, y) => 2&x*1+y,
    (x, y) => 0&3|5&y+x,
    (x, y) => x*11*7**3/13&14-y/2&4,
    (x, y) => 5&4&y-x-6, // попробовать объединить с другим паттерном диагональных полос
    (x, y) => y&5**8%x|2%10/3,
    (x, y) => 9&7*x+4**5%y+6,
    (x, y) => 5*y*x&9+2+1%11+4,
    (x, y) => 9*2==1|10&y*x-5,
    (x, y) => 0^y/2&x*3%5,
    (x, y) => y*3+2/7&x&8,
    (x, y) => 4**x%y&3,
    (x, y) => y/2*x%6/5,
    (x, y) => 0-y-4&10**3-1&x+8,
    (x, y) => 4+y/3*x&6,
    (x, y) => 6+y*x&7*8,
    (x, y) => 4+5+1&x*y,
    (x, y) => y&x**2,
    (x, y) => x&11+9*y+10**7/4**2,
    (x, y) => 7&y*1*x%6*3,
    (x, y) => 3&y*x|8%5&0/6,
    (x, y) => 60-x**7-5+y&9,
    (x, y) => x-1&9+y*3*5/2,
    (x, y) => 5+2*y/3&7&x,
    (x, y) => 2-x*6%y&5,
    (x, y) => x**9/15&y&12*3**1&4-16%18+8,
    (x, y) => 4&3**7%y&13-6^12*10%0,
    (x, y) => 4&2^6&x*y,
    (x, y) => 16-5&13**12%y/8-3-x^0**9,
    (x, y) => (x^y)==(x%y),
    (x, y) => 3>>y*x-4>>1, // соу соу
    (x, y) => 4*x%y%3,
    (x, y) => 18*x%y%9,
    (x, y) => (x&y)+2>4,

  

  ];

  // All manual defined patterns
  function gen0() {
    return allComparators;
  }

  // (x & y) % a == (x ^ y) % b
  function gen1() {
    const comparators = [...allComparators];
    Array.from(Array(20)).forEach((_, i) => {
      Array.from(Array(20)).forEach((_, j) => {
        //comparators.push((x, y) => (x & y) % i == (x ^ y) % j);
        comparators.push(eval("(x, y) => (x & y) % " + i + " == (x ^ y) % " + j));
      });
    });
    return comparators;
  }

  // Generates patterns with random combinations operators and operands
  function gen2() {
    const comparators = []

    const cbops = (a, b) => {
      let exp_length = Math.floor(Math.random() * 20) + 2;
      exp_length += exp_length % 2 + 1;

      
      const bopsDic = ['&', '^', '|', '%', '*', '**', "/", "+", "-", "==", ">>", "<<", ">", "<"];
      const uops = ['~'];

      // Operands set
      const literals = shuffle(
        Array.from(Array(exp_length - 2)).map((_, i) => i).concat(["x", "y"])
      );

      // Generate sequence
      const chars = [];
      Array.from(Array(exp_length)).forEach((_, i) => {
        if (i % 2) {
          chars.push(bopsDic[Math.floor(Math.random() * bopsDic.length)]);
        } else {
          chars.push(literals.pop());
        }
      })

      // Add parenthesis
      if (Math.random() > 0.5) {
        chars.splice(3, 0, ')');
        chars.splice(0, 0, '(');
      }
      const str = chars.join('');

      return str;
    };


    Array.from(Array(1000)).forEach((_, j) => {
      const evaluated = "(x, y) => " + cbops('x', 'y');
      comparators.push(eval(evaluated));
    });

    return comparators;
  }

  function genPat(id, aDim = 5, bDim = 1, cDim = 1) {

    const generateComparators = (expression) => {
      const comparators = [];
      for(let a = 0; a < aDim; a++)
        for(let b = 0; b < bDim; b++) {
          for(let c = 0; c < cDim; c++) {
            const body = eval("`" + expression.replace(/(\([abcd]\))/g, "${$1}") + "`")
            comparators.push(eval("(x, y) => " + body));
          }
        }

      return comparators;
    };

    return generateComparators(id);
  }


  [
          // ...genPat("y&x**a", 20)
          // ...genPat("a*y*x&b", 20, 5)
          //...genPat("a*x%y&b", 20, 5)
    //genPat("(x&y)+a>b") // не интересно
        //  ...genPat("a*x%y%b", 20, 20) // 18*x%y%9
          //...genPat("a>>y*x-b>>c", 20, 20, 20) // соу соу

          // ...genPat("a%y/b-x^c", 100, 3, 3) отстой
    //...genPat("4&64&x*y")
    //...genPat("a%x&y", 129, 1)
    //...genPat("((x & y)   &   (x ^ y) % a) | (a>>y*x-b>>c)", 100)
    //...genPat("(x * y) & (a)", 100)
    ...genPat("((x * y) & (a)) | ((x * y) & (b))", 30, 30)
    //genPat("6+y*x&56")
    //gen2()
    //gen0()
  ]
  .reverse()
  .slice(0, 10000)
  .forEach(comparator => {    
    newBox = box.cloneNode(1)
    newBox.removeAttribute('id')
    box.parentNode.appendChild(newBox)
    newBox.children[1].textContent = comparator
    if (!draw(newBox.children[0], comparator)) {
      newBox.remove();
    }
  });

  box.style.display = "none";



</script>
</body>