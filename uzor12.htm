<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <style>
        body {
            background: #000;
            color: #bbb;
            margin: 0;
        }

        #cnv {
            margin: 0 auto;
            display: block;
        }

    </style>
    <!-- link href="css.css" rel="stylesheet" media="all" / -->
    <script src="./color-scheme.js"></script>
    <script src="./html2canvas.js"></script>

</head>
<body>
<div id="wrapper">

</div>


<script>

window.zhukis = {}

var canvas, context;
var start = false;
//var px1 = 0, py1 = 0, px2 = 0, py2 = 0, px3 = 0, py3 = 0;


var canvas_width = window.innerWidth;
var canvas_height = window.innerHeight;

// radius generator
var Rg;

// color generator
var cg;

// gear teeth generator
var gtg;

// canvas center
var center = {
  x: canvas_width / 2,
  y: canvas_height / 2
}

var S;

var interval = 10;

function main() {
  canvas = document.createElement('canvas');
  canvas.id = 'cnv';

  document.body.appendChild(canvas); // adds the canvas to the body element
  document.getElementById('wrapper').appendChild(canvas);

  context = canvas.getContext("2d");

  canvas.width = canvas_width + 1;
  canvas.height = canvas_height + 1;

  cg = new InitColorGenerator();

  gtg = new GearTeethGenerator();

  Rg = new RadiusGenerator();

  setInterval('circle()', interval);

  //setInterval('screenshot()', 10000);  

}



  function circle() {
    var R1, R2;
    var r = Rg.radiuses();
    var gearTeethAmount = gtg.count(r);
    color = cg.color();

    var lw = 0.5;
    

    //context.lineDashOffset = 3;
    
    for (var i = 0; i < 360; i += gearTeethAmount) {

      var drawSegment = function() {
        var g1 = Math.PI * i / 180;
        var g2 = Math.PI * (i + gearTeethAmount / 2) / 180;
        var g3 = Math.PI * (i - gearTeethAmount / 2) / 180;

        var x1 = center.x + r.r1 * Math.sin(g1);//+A.x);
        var y1 = center.y + r.r1 * Math.cos(g1);//+A.y);
        var x2 = center.x + r.r2 * Math.sin(g2);
        var y2 = center.y + r.r2 * Math.cos(g2);
        var x3 = center.x + r.r2 * Math.sin(g3);
        var y3 = center.y + r.r2 * Math.cos(g3);

        //var x1d = x1*Math.cos(Math.PI/4) - y1*Math.sin(Math.PI/4);
        //var y1d = x1*Math.sin(Math.PI/4) + y1*Math.cos(Math.PI/4);

        //if(start == true) {
          line(x1, y1, x2, y2, color, lw, context);
          line(x1, y1, x3, y3, color, lw, context);
          //pset(x1, y1, whitecolor, context);
          //pset(px1, py1, color, context);
        //}

        //px1 = x1; py1 = y1; px2 = x2; py2 = y2; px3 = x3; py3 = y3;
        start = true;
      }

      drawSegment();
      
    }
  }

  function RadiusGenerator() {
    this.R1P = 0;
    this.R2P = 0;

    this.radiuses = function() {
      //if(this.R1P == 0) {
      if(1) {
        R1 = rnd(600);
        R2 = R1 + rnd(R1/2);    
      }
      else {
        R1 = this.R1P + rnd(10)-5
        R2 = this.R2P + rnd(10)-5
      }
      
      this.R1P = R1;
      this.R2P = R2;

      return {
        r1: R1,
        r2: R2
      }
    }
  }

  /**
  Return random color generator.
  There are two chemes
  - color-scheme.js
  - uniform random colors
  */
  function InitColorGenerator() {
    var generators = ['scheme', 'rnd'];
    var generator_name = generators[rnd(generators.length)];
    generator_name = 'scheme';

    var color;

    switch(generator_name) {
      case 'scheme':
        var generator = new function() {
          var hue = rnd(360);
          var schemeType = rnda(['mono', 'contrast', 'triade', 'tetrade', 'analogic']);
          var variation = rnda(['default', 'pastel', 'soft', 'light', 'hard', 'pale']);
          this.scheme = new ColorScheme;
          this.scheme.from_hue(hue)
              .scheme(schemeType)
              .variation(variation);
          this.color = function() {
            return '#' + this.scheme.colors()[rnd(12)];  
          }
        }
        break;
      case 'rnd':
        var generator = new function() {
          this.color = function() {

            if (rndb()) {
              color = { r: rnd(255), g: rnd(255), b: rnd(255) }
              color = "rgba(" + 255 + "," + color.g + "," + color.b + ",0.4)"
            }
            else {
              color = { r: 0, g: 0, b: 0 }
              color = "rgba(" + color.r + "," + color.g + "," + color.b + ",0.1)"
            }

            return color;
          }
        }
        break;
    }
    
    // generate color, using initialized generator
    this.color = function() {
      return generator.color()
    }    
  }

  /**
  * Count of teeth
  */
  function GearTeethGenerator() {
    // repeating flag. If true each call .count() will return value, generated previous time
    this.repeatAll = false; rndb();
    //this.repeatShift = rndb();
    // Degree of rotation
    this.shift = 0;
    // result cache
    this.result = 0;

    /**
    * @param { r1: Integer, r2: Integer }
    */
    this.count = function(r) {
      
      if(this.repeatAll && this.result > 0) {
        return this.result;
      }

      var MultipleOf = function(r) {
        return rnda([
            //[360/3, 360/6, 360/12, 360/18, 360/24, 360/30, 360/48],
            [360/6, 360/96]
            ]);
        //var v1 = [360/6, 360/12, 360/24, 360/48];
        return [360/3, 360/6, 360/12, 360/18, 360/24, 360/30, 360/48];
        // if (r.r1 < 100) return [360/3, 360/6, 360/12, 360/24];
        // if (r.r1 < 200) return [360/30];
      }

      var m = MultipleOf(r);
      var shift = rnd(10) 

      var S = rnda(m);
    
      
      if(rnd(10) > 5) {
        S *= this.shift;
      }
      
      

      S = S > 0 ? S : 360 / 6;

      this.result = S;

      return this.result;

    
    };
  }

  function rnd(v) {
    return Math.floor(Math.random() * v)
  }

  function rndb() {
    return rnd(10) > 5 ? true : false
  }

  function rnda(ar) {
    return ar[rnd(ar.length)]
  }

  function line(x1, y1, x2, y2, color, lw, context) {
    context.strokeStyle = color;
    context.lineWidth = lw;
    context.beginPath();
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    context.stroke();
  }

  function pset(x, y, color, context) {
    context.strokeStyle = color;
    context.beginPath();
    context.moveTo(x, y);
    context.lineTo(x, y + 1);
    context.stroke();
  }

function screenshot() {
  html2canvas(document.body, {
            onrendered: function (canvas) {
                var url = canvas.toDataURL();
                var a = document.createElement('a');
                a.setAttribute('href', url);
                a.setAttribute('download', rnd(1000000)+"uzor.jpeg");
                
                document.body.appendChild(a);
                a.click();
                //a.remove();
            }
        });
}

main();

</script>

</body>
</html>
